plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id "com.modrinth.minotaur" version "1.2.1"
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = "${project.mod_version}+${project.minecraft_version}"
group = project.maven_group

repositories {
    maven { url = "https://maven.gegy.dev" }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // This greatly reduces the amount of time needed to start the game, but is generally unsafe in production
    //modRuntimeOnly("supercoder79:databreaker:0.2.8") {
    //    transitive = false
    //}
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // Ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"

    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.release = 17
}

java {
    withSourcesJar()
}

jar {
    from "LICENSE.txt"
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // Select the repositories you want to publish to
    // To publish to maven local, no extra repositories are necessary. Just use the task `publishToMavenLocal`.
    repositories {
        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    }
}

def ENV = System.getenv()

def getShortMcVersion() {
    return project.minecraft_version.substring(0, 4)
}

task publishModrinth(type: com.modrinth.minotaur.TaskModrinthUpload) {
    onlyIf {
        ENV.MODRINTH_TOKEN
    }

    token = ENV.MODRINTH_TOKEN
    projectId = 'TvL1V8O5'
    versionNumber = "${project.mod_version}+${getShortMcVersion()}"
    versionName = "[${getShortMcVersion()}] NoRecipeBook v${project.mod_version}"
    versionType = "RELEASE"

    uploadFile = remapJar
    addGameVersion("${project.minecraft_version}")
    addLoader('fabric')
}

curseforge {
    if (ENV.CURSEFORGE_TOKEN) {
        apiKey = ENV.CURSEFORGE_TOKEN
    }

    project {
        id = "491407"
        changelog = "A changelog can be found at https://github.com/Grayray75/NoRecipeBook/commits/"
        releaseType = "release"
        addGameVersion "${project.minecraft_version}"
        addGameVersion "Fabric"

        mainArtifact(remapJar) {
            displayName = "[${getShortMcVersion()}] NoRecipeBook v${project.mod_version}"
        }

        afterEvaluate {
            uploadTask.dependsOn("remapJar")
        }
    }

    options {
        forgeGradleIntegration = false
    }
}
